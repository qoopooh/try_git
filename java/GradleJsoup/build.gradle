
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

jar {
    manifest {
        attributes 'Main-Class': 'berm.Main'
    }
}

task initSourceFolders { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

task wrapper(type: Wrapper) {
      gradleVersion = '1.11'
}

task runFinalJar(type: JavaExec) {
    classpath = files('build/libs/GradleJsoup.jar')
    classpath += sourceSets.main.runtimeClasspath
    main = 'berm.Main'
}

build.dependsOn.add("runFinalJar")    // Can execut by "gradle clean build"

// In this section you declare where to find the dependencies of your project
repositories {
      // Use Maven Central for resolving your dependencies.
      // You can declare any Maven/Ivy/file repository here.
      mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
      //compile fileTree(dir: 'libs', include: '*.jar')
      // The production code uses the SLF4J logging API at compile time
      //compile 'org.slf4j:slf4j-api:1.7.5'
      compile 'org.jsoup:jsoup:1.8.1'
      compile 'org.json:json:20140107'

      // Declare the dependency for your favourite test framework you want to use in your tests.
      // TestNG is also supported by the Gradle Test task. Just change the
      // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
      // 'test.useTestNG()' to your build script.
      testCompile "junit:junit:4.11"
}

